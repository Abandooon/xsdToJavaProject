package stdgui.data.model.orimodel;

@XmlType(name="ATP-TYPE--SUBTYPES-ENUM")
@XmlEnum
public enum AtpTypeSubtypesEnum {

@XmlEnumValue("APPLICATION-ARRAY-DATA-TYPE")
APPLICATION_ARRAY_DATA_TYPE("APPLICATION-ARRAY-DATA-TYPE"),

@XmlEnumValue("APPLICATION-COMPOSITE-DATA-TYPE")
APPLICATION_COMPOSITE_DATA_TYPE("APPLICATION-COMPOSITE-DATA-TYPE"),

@XmlEnumValue("APPLICATION-DATA-TYPE")
APPLICATION_DATA_TYPE("APPLICATION-DATA-TYPE"),

@XmlEnumValue("APPLICATION-PRIMITIVE-DATA-TYPE")
APPLICATION_PRIMITIVE_DATA_TYPE("APPLICATION-PRIMITIVE-DATA-TYPE"),

@XmlEnumValue("APPLICATION-RECORD-DATA-TYPE")
APPLICATION_RECORD_DATA_TYPE("APPLICATION-RECORD-DATA-TYPE"),

@XmlEnumValue("APPLICATION-SW-COMPONENT-TYPE")
APPLICATION_SW_COMPONENT_TYPE("APPLICATION-SW-COMPONENT-TYPE"),

@XmlEnumValue("ATOMIC-SW-COMPONENT-TYPE")
ATOMIC_SW_COMPONENT_TYPE("ATOMIC-SW-COMPONENT-TYPE"),

@XmlEnumValue("ATP-TYPE")
ATP_TYPE("ATP-TYPE"),

@XmlEnumValue("AUTOSAR-DATA-TYPE")
AUTOSAR_DATA_TYPE("AUTOSAR-DATA-TYPE"),

@XmlEnumValue("CLIENT-SERVER-INTERFACE")
CLIENT_SERVER_INTERFACE("CLIENT-SERVER-INTERFACE"),

@XmlEnumValue("COMPLEX-DEVICE-DRIVER-SW-COMPONENT-TYPE")
COMPLEX_DEVICE_DRIVER_SW_COMPONENT_TYPE("COMPLEX-DEVICE-DRIVER-SW-COMPONENT-TYPE"),

@XmlEnumValue("COMPOSITION-SW-COMPONENT-TYPE")
COMPOSITION_SW_COMPONENT_TYPE("COMPOSITION-SW-COMPONENT-TYPE"),

@XmlEnumValue("DATA-INTERFACE")
DATA_INTERFACE("DATA-INTERFACE"),

@XmlEnumValue("ECU-ABSTRACTION-SW-COMPONENT-TYPE")
ECU_ABSTRACTION_SW_COMPONENT_TYPE("ECU-ABSTRACTION-SW-COMPONENT-TYPE"),

@XmlEnumValue("IMPLEMENTATION-DATA-TYPE")
IMPLEMENTATION_DATA_TYPE("IMPLEMENTATION-DATA-TYPE"),

@XmlEnumValue("MODE-DECLARATION-GROUP")
MODE_DECLARATION_GROUP("MODE-DECLARATION-GROUP"),

@XmlEnumValue("MODE-DECLARATION-MAPPING-SET")
MODE_DECLARATION_MAPPING_SET("MODE-DECLARATION-MAPPING-SET"),

@XmlEnumValue("MODE-SWITCH-INTERFACE")
MODE_SWITCH_INTERFACE("MODE-SWITCH-INTERFACE"),

@XmlEnumValue("NV-BLOCK-SW-COMPONENT-TYPE")
NV_BLOCK_SW_COMPONENT_TYPE("NV-BLOCK-SW-COMPONENT-TYPE"),

@XmlEnumValue("NV-DATA-INTERFACE")
NV_DATA_INTERFACE("NV-DATA-INTERFACE"),

@XmlEnumValue("PARAMETER-INTERFACE")
PARAMETER_INTERFACE("PARAMETER-INTERFACE"),

@XmlEnumValue("PARAMETER-SW-COMPONENT-TYPE")
PARAMETER_SW_COMPONENT_TYPE("PARAMETER-SW-COMPONENT-TYPE"),

@XmlEnumValue("PORT-INTERFACE")
PORT_INTERFACE("PORT-INTERFACE"),

@XmlEnumValue("SENDER-RECEIVER-INTERFACE")
SENDER_RECEIVER_INTERFACE("SENDER-RECEIVER-INTERFACE"),

@XmlEnumValue("SENSOR-ACTUATOR-SW-COMPONENT-TYPE")
SENSOR_ACTUATOR_SW_COMPONENT_TYPE("SENSOR-ACTUATOR-SW-COMPONENT-TYPE"),

@XmlEnumValue("SERVICE-PROXY-SW-COMPONENT-TYPE")
SERVICE_PROXY_SW_COMPONENT_TYPE("SERVICE-PROXY-SW-COMPONENT-TYPE"),

@XmlEnumValue("SERVICE-SW-COMPONENT-TYPE")
SERVICE_SW_COMPONENT_TYPE("SERVICE-SW-COMPONENT-TYPE"),

@XmlEnumValue("SW-COMPONENT-TYPE")
SW_COMPONENT_TYPE("SW-COMPONENT-TYPE"),

@XmlEnumValue("TRIGGER-INTERFACE")
TRIGGER_INTERFACE("TRIGGER-INTERFACE");


    private final java.lang.String value;

    AtpTypeSubtypesEnum(java.lang.String v) {
        value = v;
    }

    public java.lang.String value() {
        return value;
    }

    public static AtpTypeSubtypesEnum fromValue(java.lang.String v) {
        for (AtpTypeSubtypesEnum c: AtpTypeSubtypesEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}