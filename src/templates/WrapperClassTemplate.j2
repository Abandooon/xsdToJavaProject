package {{ packageName }};
{% if originalClassName in ['Annotation', 'String', 'Boolean', 'Float', 'Integer', 'Area', 'Entry', 'Date', 'Collection', 'Documentation', 'EventHandler', 'Linker', 'List', 'Parameters', 'Ref', 'SocketAddress', 'System','Map','Elements'] %}
    import {{ oriPackageName }}.{{ originalClassName }};
{% endif %}
{% for attribute in attributes %}
    {% set base_type = attribute.type.split('<')[1].replace('>', '').replace('Wrapper', '') if attribute.type.startswith('ArrayList') else attribute.type.replace('Wrapper', '') %}
{% if base_type not in ['java.lang.String', 'java.lang.Boolean', 'java.lang.Float', 'java.lang.Integer'] %}
    import {{ oriPackageName }}.{{ base_type }};
{% endif %}
{% endfor %}
{% for method in additionalApiMethods %}
     {% if method.annotation_pascal_case not in ['java.lang.String', 'java.lang.Boolean', 'java.lang.Float', 'java.lang.Integer'] %}
         import {{ oriPackageName }}.{{ method.annotation_pascal_case }};
     {% endif %}
{% endfor %}
public class {{ wrapperClassName }} {

    {% if hasRefObject %}
    {% endif %}
    private {{ originalClassName }} {{ originalVariableName }};

    public {{ wrapperClassName }}({{ originalClassName }} {{ originalVariableName }}) {
        this.{{ originalVariableName }} = {{ originalVariableName }};
    }

   {% for attribute in attributes %}
    public {{ attribute.type }} get{% if attribute.name == 'class' %}Class1{% else %}{{ attribute.name[0]|upper + attribute.name[1:] }}{% endif %}() {
        {% if attribute.type.startswith('ArrayList') and 'Wrapper' in attribute.type %}
        if (CollUtil.isNotEmpty({{ originalVariableName }}.get{% if attribute.name == 'class' %}Class1{% else %}{{ attribute.name[0]|upper + attribute.name[1:] }}{% endif %}())) {
            ArrayList<{{ attribute.type.split('<')[1].replace('>', '').replace('Wrapper', '') }}> originalList = {{ originalVariableName }}.get{% if attribute.name == 'class' %}Class1{% else %}{{ attribute.name[0]|upper + attribute.name[1:] }}{% endif %}();
            ArrayList<{{ attribute.type.split('<')[1].replace('>', '') }}> wrapperList = (ArrayList<{{ attribute.type.split('<')[1].replace('>', '') }}>)originalList.stream()
                .map(item -> new {{ attribute.type.split('<')[1].replace('>', '') }}(item))
                .collect(Collectors.toList());
            return wrapperList;
        } else {
            return null;
        }
        {% else %}
        if (CollUtil.isNotEmpty({{ originalVariableName }}.get{% if attribute.name == 'class' %}Class1{% else %}{{ attribute.name[0]|upper + attribute.name[1:] }}{% endif %}())) {
            {% if 'Wrapper' in attribute.type %}
            return new {{ attribute.type }}({{ originalVariableName }}.get{% if attribute.name == 'class' %}Class1{% else %}{{ attribute.name[0]|upper + attribute.name[1:] }}{% endif %}());
            {% else %}
            return {{ originalVariableName }}.get{% if attribute.name == 'class' %}Class1{% else %}{{ attribute.name[0]|upper + attribute.name[1:] }}{% endif %}();
            {% endif %}
        } else {
            return null;
        }
        {% endif %}
    }
{% endfor %}



    {% if hasRefObject %}
    public Object get{{ originalClassName }}Obj() throws BaseXException, ClassNotFoundException, JAXBException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException, InstantiationException {
        java.lang.String path = {{ originalVariableName }}.getValue();
        java.lang.String type = {{ originalVariableName }}.getDest().toString().replace("_", "-");
        SchemaController schemaController = (SchemaController) RestrictDTO.controllerMap.get("schemaController");
        java.lang.String className = schemaController.convertClassName(type);
        Iproject currentProject = (Iproject) ApplicationContextUtil.applicationContext.get("currentProject");
        Object queryObject = schemaController.queryObject(currentProject.getName(), path, type);
        java.lang.String wrapperClassName = "{{package_name}}" + className + "Wrapper";
        Class<?> wrapperClass = Class.forName(wrapperClassName);
        Constructor<?> wrapperConstructor = wrapperClass.getConstructor(queryObject.getClass());
        Object wrapperInstance = wrapperConstructor.newInstance(queryObject);
        return wrapperInstance;
    }

    {% for method in additionalApiMethods %}
    public {% if method.has_wrapper %}{{ method.annotation_pascal_case }}Wrapper{% else %}{{ method.annotation_pascal_case }}{% endif %} get{{ method.annotation_pascal_case }}() throws BaseXException, ClassNotFoundException, JAXBException{
        java.lang.String path = {{ originalVariableName }}.getValue();
        java.lang.String type = {{ originalVariableName }}.getDest().toString().replace("_", "-");
        SchemaController schemaController = (SchemaController) RestrictDTO.controllerMap.get("schemaController");
        Iproject currentProject = (Iproject) ApplicationContextUtil.applicationContext.get("currentProject");
        Object queryObject = schemaController.queryObject(currentProject.getName(), path, type);
        {% if method.has_wrapper %}
        if(queryObject instanceof {{ method.annotation_pascal_case }}){
            return new {{ method.annotation_pascal_case }}Wrapper(({{ method.annotation_pascal_case }}) queryObject);
        }else{
            return null;
        }
        {% else %}
        if(queryObject instanceof {{ method.annotation_pascal_case }}){
            return ({{ method.annotation_pascal_case }}) queryObject;
        }else{
            return null;
        }
        {% endif %}
    }
    {% endfor %}
    {% endif %}


    {% if hasArrayListSerializable %}
    public String getValue() {
        ArrayList<Serializable> serializables = {{ originalVariableName }}.getContent();
        StringBuilder textContent = new StringBuilder();
        for (Serializable item : serializables) {
            if (item instanceof String) {
                textContent.append((String) item);
            }
        }
        return textContent.toString().trim();
    }

    {% for method in additionalApiMethods %}
    public List<{% if method.has_wrapper %}{{ method.annotation_pascal_case }}Wrapper{% else %}{{ method.annotation_pascal_case }}{% endif %}> get{{ method.annotation_pascal_case }}Refs() {
    ArrayList<Serializable> serializables = {{ method.original_variable_name }}.getContent();
    TypeCast typeCast = new TypeCast();
    {% if method.has_wrapper %}
    ArrayList<{{ method.annotation_pascal_case }}> objects = typeCast.getElementsOfType(serializables, {{ method.annotation_pascal_case }}.class);
    ArrayList<{{ method.annotation_pascal_case }}Wrapper> wrapperObjects = new ArrayList<>();
    wrapperObjects = (ArrayList<{{ method.annotation_pascal_case }}Wrapper>) objects.stream()
        .map(a -> new {{ method.annotation_pascal_case }}Wrapper(a))
        .collect(Collectors.toList());
    return wrapperObjects;
    {% else %}
    return typeCast.getElementsOfType(serializables, {{ method.annotation_pascal_case }}.class);
    {% endif %}
    }
    {% endfor %}
    {% endif %}
}
